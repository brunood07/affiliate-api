generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  role      UserRole @default(USER)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  payments Payment[]

  @@map("tb_users")
}

model Affiliate {
  id          String  @id @default(uuid())
  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  email       String? @unique
  phoneNumber String  @map("phone_number")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  payments Payment[]

  @@map("tb_affiliates")
}

model PaymentType {
  id       String  @id @default(uuid())
  name     String
  active   Boolean @default(true)
  quantity String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  payments Payment[]

  @@map("tb_payment_types")
}

model Payment {
  id            String      @id @default(uuid())
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
  paymentTypeId String

  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  affiliateId String

  user         User   @relation(fields: [registeredBy], references: [id], onDelete: Cascade)
  registeredBy String @map("registered_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tb_payments")
}
